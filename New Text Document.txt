@page
@model Jig_Store_Management_System.Pages.TestCalibrationModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kéo Thả và Thay Đổi Kích Thước Ảnh</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .preview-area {
            width: 90%;
            min-height: 200px;
            border: 2px solid #ddd;
            margin: 20px auto;
            padding: 10px;
            background-color: #f0f0f0;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .drop-area {
            width: 210mm;
            height: 297mm;
            border: 2px dashed #ccc;
            margin: 20px auto;
            position: relative;
            overflow: hidden;
            background-color: #f9f9f9;
        }

        .image {
            cursor: move;
        }

        .resize-container {
            position: relative;
            display: inline-block;
        }

        img {
            width: 200px;
            height: auto;
        }

        .resizer {
            background-color: orange;
            position: absolute;
            cursor: pointer;
        }

        .top-left {
            top: -5px;
            left: -5px;
            cursor: nw-resize;
        }

        .top-right {
            top: -5px;
            right: -5px;
            cursor: ne-resize;
        }

        .bottom-left {
            bottom: -5px;
            left: -5px;
            cursor: sw-resize;
        }

        .bottom-right {
            bottom: -5px;
            right: -5px;
            cursor: se-resize;
        }
    </style>
</head>
<body>
    <h1>Chọn và Kéo Thả Ảnh</h1>
    <button id="getDataButton">Lấy Thông Tin Ảnh</button>
    <input type="file" id="fileInput" multiple>
    <div class="preview-area" id="previewArea">
        <p>Ảnh được chọn sẽ hiển thị tại đây:</p>
    </div>
    <div class="drop-area" id="dropArea"></div>

    <form method="post" id="hiddenForm" asp-page-handler="SubmitImport" style="display: none;">
        <input type="text" id="dataImagesString" name="dataImages" required>
    </form>

    <script>
        const fileInput = document.getElementById('fileInput');
        const previewArea = document.getElementById('previewArea');
        const dropArea = document.getElementById('dropArea');
        const imageBase64Data = new Map();

        fileInput.addEventListener('change', (event) => {
            const files = event.target.files;
            for (const file of files) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const container = document.createElement('div');
                    container.classList.add('resize-container');
                    container.style.position = 'relative';

                    const img = document.createElement('img');
                    img.classList.add('image');
                    img.src = e.target.result;
                    img.alt = file.name;
                    container.appendChild(img);

                    imageBase64Data.set(file.name, e.target.result.split(',')[1]);

                    previewArea.appendChild(container);

                    makeDraggable(container);
                    makeResizable(container);
                };
                reader.readAsDataURL(file);
            }
        });

        function makeDraggable(image) {
            let offsetX, offsetY;
            image.addEventListener('mousedown', (event) => {
                offsetX = event.offsetX;
                offsetY = event.offsetY;
                document.addEventListener('mousemove', moveImage);
                document.addEventListener('mouseup', () => {
                    document.removeEventListener('mousemove', moveImage);
                });
            });

            function moveImage(event) {
                const dropBounds = dropArea.getBoundingClientRect();
                const imgBounds = image.getBoundingClientRect();
                const x = event.clientX - offsetX;
                const y = event.clientY - offsetY;

                if (x >= dropBounds.left && y >= dropBounds.top && x + imgBounds.width <= dropBounds.right && y + imgBounds.height <= dropBounds.bottom) {
                    image.style.position = 'absolute';
                    image.style.top = `${y - dropBounds.top}px`;
                    image.style.left = `${x - dropBounds.left}px`;
                    dropArea.appendChild(image);
                }
            }
        }

        function makeResizable(container) {
            container.addEventListener('dblclick', () => {

                removeResizeHandles(container);

                const corners = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];
                corners.forEach(corner => {
                    const handle = document.createElement('div');
                    handle.classList.add('resizer', corner);
                    handle.style.position = 'absolute';
                    handle.style.width = '10px';
                    handle.style.height = '10px';
                    handle.style.backgroundColor = 'orange';
                    handle.style.cursor = getCursor(corner);
                    positionHandle(handle, corner, container);
                    container.appendChild(handle);

                    handle.addEventListener('mousedown', (event) => resizeImage(event, container, corner));
                });

                const handleOutsideClick = (event) => {
                    if (!container.contains(event.target)) {
                        removeResizeHandles(container);
                        document.removeEventListener('click', handleOutsideClick);
                    }
                };

                document.addEventListener('click', handleOutsideClick);
            });
        }

        function removeResizeHandles(container) {
            const handles = container.querySelectorAll('.resizer');
            handles.forEach(handle => handle.remove());
        }

        function positionHandle(handle, corner, container) {
            if (corner.includes('top')) handle.style.top = '-5px';
            if (corner.includes('bottom')) handle.style.bottom = '-5px';
            if (corner.includes('left')) handle.style.left = '-5px';
            if (corner.includes('right')) handle.style.right = '-5px';
        }

        function getCursor(corner) {
            switch (corner) {
                case 'top-left':
                case 'bottom-right':
                    return 'nwse-resize';
                case 'top-right':
                case 'bottom-left':
                    return 'nesw-resize';
            }
        }

        function resizeImage(event, container, corner) {
            event.stopPropagation();
            const img = container.querySelector('img');
            const startX = event.pageX;
            const startY = event.pageY;
            const startWidth = img.offsetWidth;
            const startHeight = img.offsetHeight;
            const startLeft = container.offsetLeft;
            const startTop = container.offsetTop;

            const onMouseMove = (moveEvent) => {
                const dx = moveEvent.pageX - startX;
                const dy = moveEvent.pageY - startY;

                if (corner.includes('right')) {
                    img.style.width = `${startWidth + dx}px`;
                }
                if (corner.includes('bottom')) {
                    img.style.height = `${startHeight + dy}px`;
                }
                if (corner.includes('left')) {
                    img.style.width = `${startWidth - dx}px`;
                    container.style.left = `${startLeft + dx}px`;
                }
                if (corner.includes('top')) {
                    img.style.height = `${startHeight - dy}px`;
                    container.style.top = `${startTop + dy}px`;
                }
            };

            const onMouseUp = async () => {
                const updatedBase64 = await generateBase64(img);
                imageBase64Data.set(img.alt, updatedBase64.split(',')[1]);
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            };

            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        }

        function generateBase64(img) {
            return new Promise((resolve) => {
                const canvas = document.createElement('canvas');
                canvas.width = img.offsetWidth;
                canvas.height = img.offsetHeight;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                resolve(canvas.toDataURL());
            });
        }

        const getDataButton = document.getElementById('getDataButton');
        getDataButton.addEventListener('click', () => {
            const images = dropArea.querySelectorAll('.image');
            const imageData = [];

            images.forEach(image => {
                const rect = image.getBoundingClientRect();
                const dropRect = dropArea.getBoundingClientRect();
                const top = rect.top - dropRect.top;
                const left = rect.left - dropRect.left;
                const width = rect.width;
                const height = rect.height;

                const base64 = imageBase64Data.get(image.alt);

                imageData.push({
                    Name: image.alt || 'Unnamed Image',
                    Base64: base64,
                    Top: Math.round(top),
                    Left: Math.round(left),
                    Width: Math.round(width),
                    Height: Math.round(height)
                });
            });

            const dataImagesString = JSON.stringify(imageData);

            document.getElementById("dataImagesString").value = dataImagesString;
            document.getElementById("hiddenForm").submit();

            alert("Thông tin ảnh đã được lấy và hiển thị trong console!");
        });
    </script>
</body>
</html>
